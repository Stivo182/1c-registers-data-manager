#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВерсияСовместимостиКонфигурации = ВерсияСовместимостиКонфигурации();
	
	ИнициализироватьСписокРегистров();
	
	ВыполнятьВТранзакции = Ложь;
	РежимРазработчика = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолноеИмяПриИзменении(Элемент)
	
	ИмяРегистратора = "";	
	ОписаниеРегистра = ПолучитьОписаниеРегистра(ПолноеИмяРегистра);
	УстановитьСписокВыбораРегистраторов();
	НастроитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРегистратораПриИзменении(Элемент)
	НастроитьСписок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);		
	
	ДанныеЗаписи = НоваяЗапись();
	ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ТекущиеДанные);
	
	ОткрытьФормуВводаЗаписи("Изменить", Новый Структура("ДанныеЗаписи", ДанныеЗаписи));	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьЗапись(Команда)
	
	ОткрытьФормуВводаЗаписи("Добавить");	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапись(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = НоваяЗапись();
	ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ТекущиеДанные);
		
	ОткрытьФормуВводаЗаписи("Скопировать", Новый Структура("ДанныеЗаписи", ДанныеЗаписи));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеЗаписи(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбУдаленииЗаписи", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Подтвердите удаление записей", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписиПоОтбору(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбУдаленииВсехЗаписей", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Подтвердите удаление записей", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапись(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = НоваяЗапись();
	ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ТекущиеДанные);
	
	ОткрытьФормуВводаЗаписи("Изменить", Новый Структура("ДанныеЗаписи", ДанныеЗаписи));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияВыделенные(Команда)
			
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВводаЗаписи("УстановитьЗначенияВыделенные");	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПоОтбору(Команда)
	
	ОткрытьФормуВводаЗаписи("УстановитьЗначенияПоОтбору");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьСписокРегистров()

	НовоеОписаниеРегистров = Новый Соответствие();
	
	Элементы.ПолноеИмяРегистра.СписокВыбора.Очистить();
 	
	ПрочитатьРегистры(Метаданные.РегистрыСведений, НовоеОписаниеРегистров);
	ПрочитатьРегистры(Метаданные.РегистрыНакопления, НовоеОписаниеРегистров);
	ПрочитатьРегистры(Метаданные.РегистрыБухгалтерии, НовоеОписаниеРегистров);
	
	ОписаниеРегистров = Новый ФиксированноеСоответствие(НовоеОписаниеРегистров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораРегистраторов()
	
	СписокВыбора = Элементы.ИмяРегистратора.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		ОписаниеРеквизита = ОписаниеРегистра.Реквизиты["Регистратор"];
		Типы = ОписаниеРеквизита.ТипЗначения.Типы();
		Для Каждого Тип Из Типы Цикл
			Ссылка = Новый(Тип);	
			МетаданныеОбъекта = Ссылка.Метаданные();
			СписокВыбора.Добавить(МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним,, БиблиотекаКартинок.Документ);
		КонецЦикла;
	КонецЕсли;
	
	СписокВыбора.СортироватьПоПредставлению();
	
	Элементы.ИмяРегистратора.Доступность = СписокВыбора.Количество();
	
КонецПроцедуры

&НаСервере
Функция ВерсияСовместимостиКонфигурации()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	РежимСовместимости = Метаданные.РежимСовместимости;
	
	Если РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		ВерсияРежимаСовместимости = СистемнаяИнформация.ВерсияПриложения;
	Иначе
		ВерсияРежимаСовместимости = СтрСоединить(СтрРазделить(РежимСовместимости, СтрСоединить(СтрРазделить(РежимСовместимости, "1234567890", Ложь), ""), Ложь), ".") + ".0";
	КонецЕсли;
	
	Возврат ВерсияРежимаСовместимости;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаСервере
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра %1: %2'"), "СтрокаВерсии1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
	    	НСтр("ru = 'Неправильный формат параметра %1: %2'"), "СтрокаВерсии2", СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачинаетсяСПодстрокиИЗаканчиваетсяЧислом(Строка, Подстрока)
	
	Инд = СтрНайти(Строка, Подстрока);
	
	Если Инд <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОкончаниеСтроки = Сред(Строка, СтрДлина(Подстрока) + 1);
	
	Возврат ТолькоЦифрыВСтроке(ОкончаниеСтроки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифрыВСтроке(Строка)
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Строка, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЦифра(Символ)
	Код = КодСимвола(Символ);
	Возврат Код >= 48 И Код <= 57;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЛатиница(Символ)
	Код = КодСимвола(Символ);
	Возврат Код >= 65 И Код <= 90 Или Код >= 97 И Код <= 122;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоКириллица(Символ)
	Код = КодСимвола(Символ);
	Возврат Код >= 1040 И Код <= 1103 Или Код = 1025 Или Код = 1105;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПозицияПоследнегоЧислаВСтроке(Строка)
	ДлинаСтроки = СтрДлина(Строка);
	
	Позиция = 0;
	Для Инд = 0 По ДлинаСтроки - 1 Цикл
		ТекущаяПозиция = ДлинаСтроки - Инд;
		Символ = Сред(Строка, ТекущаяПозиция, 1);		
		КодСимвола = КодСимвола(Символ);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			Позиция = ТекущаяПозиция;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Позиция;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УдалитьДублирубщиеСимволы(Знач Строка, Символ)	
	ДублирующийСимвол = Символ + Символ;
	Пока СтрНайти(Строка, ДублирующийСимвол) Цикл
		Строка = СтрЗаменить(Строка, ДублирующийСимвол, Символ);
	КонецЦикла;
	Возврат Строка;
КонецФункции

#Область РаботаСМетаданными

// Читает регистры.
// 
// Параметры:
//  КоллекцияОбъектовМетаданных - КоллекцияОбъектовМетаданных - Коллекция объектов метаданных
//  ОписаниеРегистров - Соответствие из КлючИЗначение - Описание регистров
&НаСервере
Процедура ПрочитатьРегистры(КоллекцияОбъектовМетаданных, ОписаниеРегистров)
	
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		ОписаниеРегистра = ПрочитатьРегистр(ОбъектМетаданных);
				
		ОписаниеРегистров.Вставить(ОписаниеРегистра.ПолноеИмя, ОписаниеРегистра);
		
		Элементы.ПолноеИмяРегистра.СписокВыбора.Добавить(ОписаниеРегистра.ПолноеИмя, 
			ОписаниеРегистра.Синоним,,
			КартинкаРегистра(ОписаниеРегистра));		
	КонецЦикла;

КонецПроцедуры

// Возвращает описание регистра.
// 
// Параметры:
//  ОбъектМетаданных	- ОбъектМетаданныхРегистрСведений
//  					- ОбъектМетаданныхРегистрНакопления
//  					- ОбъектМетаданныхРегистрБухгалтерии
//  					- ОбъектМетаданныхРегистрРасчета - Объект метаданных
//
// Возвращаемое значение:
//	см. НовоеОписаниеРегистра
&НаСервере
Функция ПрочитатьРегистр(ОбъектМетаданных)
	
	ОписаниеРегистра = НовоеОписаниеРегистра();
	ОписаниеРегистра.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	ОписаниеРегистра.Синоним = ОбъектМетаданных.Синоним;
	ОписаниеРегистра.Имя = ОбъектМетаданных.Имя;
	ОписаниеРегистра.Тип = ТипРегистраПоПолномуИмени(ОписаниеРегистра.ПолноеИмя);
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		И Строка(ОбъектМетаданных.РежимЗаписи) = "Независимый" Тогда
		ОписаниеРегистра.ПодчинениеРегистратору = Ложь;	
	Иначе
		ОписаниеРегистра.ПодчинениеРегистратору = Истина;
	КонецЕсли;
	
	Если Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		ОписаниеРегистра.Корреспонденция = ОбъектМетаданных.Корреспонденция;	
		ОписаниеРегистра.МаксКоличествоСубконто = ОбъектМетаданных.ПланСчетов.МаксКоличествоСубконто;
	КонецЕсли;

	Возврат ОписаниеРегистра;
			
КонецФункции

// Прочитать реквизиты регистра.
// 
// Параметры:
//  ОписаниеРегистра - см. НовоеОписаниеРегистра
&НаСервере
Процедура ПрочитатьРеквизитыРегистра(ОписаниеРегистра)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеРегистра.ПолноеИмя);
	
	РеквизитыРегистра = Новый Соответствие();
			
	ПорядокРеквизита = 0;		
	Для Каждого ТипРеквизита Из ТипыРеквизитов() Цикл
		
		Для Каждого Реквизит Из ОбъектМетаданных[ТипРеквизита] Цикл
			
			ПорядокРеквизита = ПорядокРеквизита + 1;
			
			ОписаниеРеквизита = НовоеОписаниеРеквизитаРегистра();
			ОписаниеРеквизита.Имя = Реквизит.Имя;
			ОписаниеРеквизита.Синоним = Реквизит.Синоним;
			ОписаниеРеквизита.Тип = ТипРеквизита;
			ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
			
			Если Не ЗначениеЗаполнено(ОписаниеРеквизита.Синоним) Тогда
				ОписаниеРеквизита.Синоним = СинонимРеквизитаПоИмени(ОписаниеРеквизита.Имя);
			КонецЕсли;
			
			Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) 
				И ТипРеквизита = "СтандартныеРеквизиты" 
				И (ЭтоВидСубконтоПоИмени(Реквизит.Имя) Или ЭтоСубконтоПоИмени(Реквизит.Имя)) Тогда
				ОписаниеРеквизита.Порядок = ПорядокРеквизита + 50;
			Иначе
				ОписаниеРеквизита.Порядок = ПорядокРеквизита;
			КонецЕсли;
		
			Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда				
				Если ТипРеквизита = "Измерения" Или ТипРеквизита = "Ресурсы" Тогда
					ОписаниеРеквизита.УчетПоСчету = Не Реквизит.Балансовый;
				ИначеЕсли ТипРеквизита = "СтандартныеРеквизиты" 
					И (ЭтоВидСубконтоПоИмени(Реквизит.Имя) Или ЭтоСубконтоПоИмени(Реквизит.Имя)) Тогда
					ОписаниеРеквизита.УчетПоСчету = Истина;
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыРегистра.Вставить(ОписаниеРеквизита.Имя, ОписаниеРеквизита);
				
		КонецЦикла;			
		
		ПорядокРеквизита = ПорядокРеквизита + 100;
		
	КонецЦикла;				
	
	Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда
		ОписаниеРеквизита = НовоеОписаниеРеквизитаРегистра();
		ОписаниеРеквизита.Имя = "Счет";
		ОписаниеРеквизита.Синоним = "Счет";
		ОписаниеРеквизита.Порядок = ПорядокРеквизита + 1;
		ОписаниеРеквизита.Тип = "СтандартныеРеквизиты";
		ОписаниеРеквизита.ТипЗначения = Новый ОписаниеТипов("ПланСчетовСсылка." + ОбъектМетаданных.ПланСчетов.Имя);
		РеквизитыРегистра.Вставить(ОписаниеРеквизита.Имя, ОписаниеРеквизита);					
	КонецЕсли;
	
	ОписаниеРегистра.Реквизиты = РеквизитыРегистра;
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОписаниеПолейЗаписи(ОписаниеРегистра)
	
	ФорматПорядка = "ЧЦ=3; ЧВН=";
	
	СписокПолей = Новый СписокЗначений();
	
	КорреспонденцииСчетов = КорреспонденцииСчетов();
		
	Для Каждого КлючИЗапись Из ОписаниеРегистра.Реквизиты Цикл
		
		ОписаниеРеквизита = КлючИЗапись.Значение;
		
		Если ЭтоРегистрБухгалтерии(ОписаниеРегистра)
			И (ОписаниеРеквизита.УчетПоСчету Или ОписаниеРеквизита.Имя = "Счет") Тогда	
			
			Для Каждого КорреспонденцияСчета Из КорреспонденцииСчетов Цикл
				ОписаниеПоля = НовоеОписаниеПоляЗаписи();
				
				Если ОписаниеРеквизита.Тип = "СтандартныеРеквизиты" 
					И (ЭтоВидСубконтоПоИмени(ОписаниеРеквизита.Имя) 
						Или ЭтоСубконтоПоИмени(ОписаниеРеквизита.Имя)) Тогда
					ОписаниеПоля.Имя = ИмяРеквизитаСубконтоСКорреспонденциейСчета(ОписаниеРеквизита.Имя, КорреспонденцияСчета);
				Иначе
					ОписаниеПоля.Имя = ОписаниеРеквизита.Имя + КорреспонденцияСчета;
				КонецЕсли;
				
				ОписаниеПоля.ТипЗначения = ОписаниеРеквизита.ТипЗначения;
				ОписаниеПоля.Заголовок = СтрШаблон("%1%2",
					ОписаниеРеквизита.Синоним,
					?(КорреспонденцияСчета = "", "", " (" + КорреспонденцияСчета + ")")
				);
				
				Порядок = Формат(ОписаниеРеквизита.Порядок + ?(КорреспонденцияСчета = "Кт", 50, 0), ФорматПорядка) + ОписаниеПоля.Имя;
				СписокПолей.Добавить(ОписаниеПоля, Порядок);			
			КонецЦикла;	
			
		Иначе
			
			ОписаниеПоля = НовоеОписаниеПоляЗаписи();
			ОписаниеПоля.Имя = ОписаниеРеквизита.Имя;
			ОписаниеПоля.ТипЗначения = ОписаниеРеквизита.ТипЗначения;
			ОписаниеПоля.Заголовок = ОписаниеРеквизита.Синоним;
			
			Порядок = Формат(ОписаниеРеквизита.Порядок, ФорматПорядка) + ОписаниеПоля.Имя;
			СписокПолей.Добавить(ОписаниеПоля, Порядок);
			
		КонецЕсли;
					
	КонецЦикла;
	
	СписокПолей.СортироватьПоПредставлению();
	
	ОписаниеРегистра.ПоляЗаписи = СписокПолей.ВыгрузитьЗначения();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеРегистра(ПолноеИмя)
	
	ОписаниеРегистра = ОписаниеРегистров[ПолноеИмя];
	
	Если ОписаниеРегистра = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;

	Если ОписаниеРегистра.Реквизиты.Количество() = 0 Тогда
		ПрочитатьРеквизитыРегистра(ОписаниеРегистра);
	КонецЕсли;

	Если ОписаниеРегистра.ПоляЗаписи.Количество() = 0 Тогда
		ПрочитатьОписаниеПолейЗаписи(ОписаниеРегистра);
	КонецЕсли;
		
	Возврат ОписаниеРегистра;
				
КонецФункции

&НаСервере
Функция ПолучитьМенеджерРегистра(ОписаниеРегистра)
	
	Если ЭтоРегистрСведений(ОписаниеРегистра) Тогда
		Возврат РегистрыСведений[ОписаниеРегистра.Имя];
	ИначеЕсли ЭтоРегистрНакопления(ОписаниеРегистра) Тогда
		Возврат РегистрыНакопления[ОписаниеРегистра.Имя];
	ИначеЕсли ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда
		Возврат РегистрыБухгалтерии[ОписаниеРегистра.Имя];
	Иначе
		ВызватьИсключение СтрШаблон("Не определен менеджер регистра %1", ОписаниеРегистра.Имя);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КорреспонденцииСчетов()
	КорреспонденцииСчетов = Новый Массив;
	Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда			
		Если ОписаниеРегистра.Корреспонденция Тогда 
			КорреспонденцииСчетов.Добавить("Дт");	
			КорреспонденцииСчетов.Добавить("Кт");	
		Иначе
			КорреспонденцииСчетов.Добавить("");	
		КонецЕсли;
	КонецЕсли;
	Возврат КорреспонденцииСчетов;
КонецФункции

&НаСервере 
Функция НоваяЗапись()
	
	Запись = Новый Структура;
	
	Для Каждого Поле Из ОписаниеРегистра.ПоляЗаписи Цикл	
		Запись.Вставить(Поле.Имя, Поле.ТипЗначения.ПривестиЗначение());	
	КонецЦикла;
	
	Возврат Запись;
	
КонецФункции

&НаСервере
Функция КартинкаРегистра(ОписаниеРегистра)
	Возврат БиблиотекаКартинок[ОписаниеРегистра.Тип];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРегистрСведений(ОписаниеРегистра)
	Возврат ОписаниеРегистра.Тип = "РегистрСведений";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРегистрНакопления(ОписаниеРегистра)
	Возврат ОписаниеРегистра.Тип = "РегистрНакопления";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРегистрБухгалтерии(ОписаниеРегистра)
	Возврат ОписаниеРегистра.Тип = "РегистрБухгалтерии";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВидСубконтоПоИмени(Имя)
	Возврат НачинаетсяСПодстрокиИЗаканчиваетсяЧислом(Имя, "ВидСубконто");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСубконтоПоИмени(Имя)
	Возврат НачинаетсяСПодстрокиИЗаканчиваетсяЧислом(Имя, "Субконто");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СинонимРеквизитаПоИмени(Знач Имя)
	
	СимволПробела = Символ(32);
	Имя = СтрЗаменить(Имя, "_", СимволПробела);
	
	ДлинаСтроки = СтрДлина(Имя);

	Если ДлинаСтроки = 1 Тогда
		Возврат ВРег(Имя);
	КонецЕсли;
	
	МассивНаличияСимволаВерхнегоРегистра = Новый Массив(ДлинаСтроки);
	
	Для НомерПозиции = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(Имя, НомерПозиции, 1);		
		МассивНаличияСимволаВерхнегоРегистра[НомерПозиции - 1] = 
			?((ЭтоЛатиница(ТекущийСимвол) Или ЭтоКириллица(ТекущийСимвол)) 
				И ВРег(ТекущийСимвол) = ТекущийСимвол, 1, 0);
	КонецЦикла;

	МассивНакопленногоКоличестваСимволовВерхнегоРегистра = Новый Массив(ДлинаСтроки);
	
	ИндНачало = 0;
	НакопленноеКоличество = 0;
	ВГраница = МассивНаличияСимволаВерхнегоРегистра.ВГраница();
	Для ИндОсновной = 0 По ВГраница Цикл
		НакопленноеКоличество = НакопленноеКоличество + МассивНаличияСимволаВерхнегоРегистра[ИндОсновной];
		
		Если МассивНаличияСимволаВерхнегоРегистра[ИндОсновной] = 0 Или ИндОсновной = ВГраница Тогда
			Если НакопленноеКоличество > 0 Тогда
				ИндКонец = ИндОсновной - ?(МассивНаличияСимволаВерхнегоРегистра[ИндОсновной] = 1 И ИндОсновной = ВГраница, 0, 1);
				Для ИндПромежуточный = ИндНачало По ИндКонец Цикл
					МассивНакопленногоКоличестваСимволовВерхнегоРегистра[ИндПромежуточный] = НакопленноеКоличество;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивНакопленногоКоличестваСимволовВерхнегоРегистра[ИндОсновной] = Неопределено Тогда
				МассивНакопленногоКоличестваСимволовВерхнегоРегистра[ИндОсновной] = МассивНаличияСимволаВерхнегоРегистра[ИндОсновной];
			КонецЕсли;
			
			НакопленноеКоличество = 0;
			ИндНачало = ИндОсновной + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Синоним = "";
	КоличествоВерхнихСимволовПредыдущее = 0;
	ВГраница = МассивНакопленногоКоличестваСимволовВерхнегоРегистра.ВГраница();
	Для Инд = 0 По ВГраница Цикл
		
		ТекущийСимвол = Сред(Имя, Инд + 1, 1);
				
		КоличествоВерхнихСимволов = МассивНакопленногоКоличестваСимволовВерхнегоРегистра[Инд];
		ПоследнийСимвол = Прав(Синоним, 1);
		
		// Первый символ оставляем как есть
		Если Инд = 0 Тогда
			Синоним = ТекущийСимвол;
		// Первую цифру отделяем пробелом
		ИначеЕсли ЭтоЦифра(ТекущийСимвол) И Не ЭтоЦифра(ПоследнийСимвол) Тогда
			Синоним = Синоним + СимволПробела + ТекущийСимвол;
		// Символы в нижнем регистре и остальные цифры оставляем как есть
		ИначеЕсли КоличествоВерхнихСимволов = 0 Тогда
			Синоним = Синоним + ТекущийСимвол;
		// Одиночный символ в верхнем регистре приводим в нижний регистр и разделяем пробелом
		ИначеЕсли КоличествоВерхнихСимволов = 1 Тогда
			Синоним = Синоним + СимволПробела + НРег(ТекущийСимвол);
		// Последние 2 подряд символа в верхнем регистре разделяем пробелом и не меняем регистр (1й символ)
		ИначеЕсли КоличествоВерхнихСимволов = 2 
			И КоличествоВерхнихСимволовПредыдущее <> 2 И Инд + 1 = ВГраница Тогда
			Синоним = Синоним + СимволПробела + ТекущийСимвол; 
		// Последние 2 подряд символа в верхнем регистре разделяем пробелом и не меняем регистр (2й символ)
		ИначеЕсли КоличествоВерхнихСимволов = 2 
			И КоличествоВерхнихСимволовПредыдущее = 2 И Инд = ВГраница Тогда
			Синоним = Синоним + "" + ТекущийСимвол; 
		// 2 подряд символа в верхнем регистре приводим в нижний регистр и разделяем пробелом каждый символ
		ИначеЕсли КоличествоВерхнихСимволов = 2 Тогда
			Синоним = Синоним + СимволПробела + НРег(ТекущийСимвол);
		// Более 2-х подряд идущих символов в врехнем регистре разделяем пробелом и не меняем регистр (1й символ)
		ИначеЕсли НРег(ПоследнийСимвол) = ПоследнийСимвол Тогда
			Синоним = Синоним + СимволПробела + ТекущийСимвол;
		// Более 2-х подряд идущих символов в врехнем регистре разделяем пробелом и не меняем регистр (Начиная со 2-го символа)
		Иначе
			Синоним = Синоним + ТекущийСимвол;
		КонецЕсли;
		
		КоличествоВерхнихСимволовПредыдущее = КоличествоВерхнихСимволов;
		
	КонецЦикла;

	Синоним = УдалитьДублирубщиеСимволы(Синоним, СимволПробела);
	
	// Первый символ возводим в верхний регистр
	Синоним = ВРег(Лев(Синоним, 1)) + Сред(Синоним, 2);
	
	Возврат Синоним;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеквизитаСубконтоСКорреспонденциейСчета(Имя, КорреспонденцияСчета)

	ПозицияЧисла = ПозицияПоследнегоЧислаВСтроке(Имя);
	
	Если ПозицияЧисла Тогда
		Возврат "" + Сред(Имя, 1, ПозицияЧисла - 1) + КорреспонденцияСчета + Сред(Имя, ПозицияЧисла);	
	Иначе	
		Возврат "" + Имя + КорреспонденцияСчета;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипРегистраПоПолномуИмени(ПолноеИмя)
	Возврат Лев(ПолноеИмя, СтрНайти(ПолноеИмя, ".") - 1);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыРеквизитов()
	Массив = Новый Массив;
	Массив.Добавить("СтандартныеРеквизиты");
	Массив.Добавить("Измерения");
	Массив.Добавить("Ресурсы");
	Массив.Добавить("Реквизиты");
	Возврат Массив;
КонецФункции

// Новое описание регистра.
// 
// Возвращаемое значение:
//  Структура:
//  	Для всех регистров
//			* ПолноеИмя - Строка - Полное имя регистра
//			* Синоним - Строка - Синоним
//			* Имя - Строка - Имя
//			* Тип - Строка - Тип регистра. Возможные варианты: РегистрСведений, РегистрНакопления, РегистрБухгалтерии
//			* ПодчинениеРегистратору - Булево - Подчинен регистратору
//			* Реквизиты - Соответствие из КлючИЗначение:
//				** Ключ - Строка - Имя поля
//				** Значение - см. НовоеОписаниеРеквизитаРегистра
//			* ПоляЗаписи - Соответствие из КлючИЗначение:
//				** Ключ - Строка - Имя поля
//				** Значение - см. НовоеОписаниеПоляЗаписи		
//		
//		Для регистра бухгалтерии
//			* Корреспонденция - Булево - Корреспонденция
//			* МаксКоличествоСубконто - Число - Максимальное количество субконто
&НаСервере
Функция НовоеОписаниеРегистра()
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ПолноеИмя", "");
	ОписаниеРегистра.Вставить("Синоним", "");
	ОписаниеРегистра.Вставить("Имя", "");
	ОписаниеРегистра.Вставить("Тип", "");
	ОписаниеРегистра.Вставить("ПодчинениеРегистратору", Ложь);
	ОписаниеРегистра.Вставить("Корреспонденция", Ложь);	
	ОписаниеРегистра.Вставить("МаксКоличествоСубконто", 0);	
	ОписаниеРегистра.Вставить("Реквизиты", Новый Соответствие());
	ОписаниеРегистра.Вставить("ПоляЗаписи", Новый Массив);		
	Возврат ОписаниеРегистра;
КонецФункции

&НаСервере
Функция НовоеОписаниеРеквизитаРегистра()
	ОписаниеРеквизита = Новый Структура();
	ОписаниеРеквизита.Вставить("Имя", "");
	ОписаниеРеквизита.Вставить("Синоним", "");
	ОписаниеРеквизита.Вставить("Порядок", 0);
	ОписаниеРеквизита.Вставить("Тип", "");
	ОписаниеРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов());	
	ОписаниеРеквизита.Вставить("УчетПоСчету", Ложь);
	Возврат ОписаниеРеквизита;
КонецФункции

&НаСервере
Функция НовоеОписаниеПоляЗаписи()
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Имя", "");
	ОписаниеПоля.Вставить("Заголовок", "");
	ОписаниеПоля.Вставить("ТипЗначения", Новый ОписаниеТипов());	
	Возврат ОписаниеПоля;
КонецФункции

#КонецОбласти

#Область РаботаСоСписком

&НаСервере
Процедура НастроитьСписок()
	УстановитьТекстЗапроса();
	НастроитьПоляНабораДанныхКомпоновкиДанных();
	ДобавитьЭлементыПолейСписка();
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапроса()
	
	Если ОписаниеРегистра = Неопределено Тогда
		Список.ТекстЗапроса = "";
		Возврат;
	КонецЕсли;
	
	ПутьТаблицы = "";
	Если ЭтоРегистрСведений(ОписаниеРегистра) Тогда
		ПутьТаблицы = ОписаниеРегистра.ПолноеИмя;	
	ИначеЕсли ЭтоРегистрНакопления(ОписаниеРегистра) Тогда
		ПутьТаблицы = ОписаниеРегистра.ПолноеИмя;
	ИначеЕсли ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда
		ПутьТаблицы = ОписаниеРегистра.ПолноеИмя + ".ДвиженияССубконто";
	КонецЕсли;
	
	ТекстЗапроса = "";	
	Если ОписаниеРегистра.ПоляЗаписи.Количество() Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ ";
		
		ЭтоПервоеПоле = Истина;
		Для Каждого Поле Из ОписаниеРегистра.ПоляЗаписи Цикл
			
			Если Не ЭтоПервоеПоле Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяРегистратора)
				И Поле.Имя = "Регистратор" Тогда
				ТекстЗапроса = ТекстЗапроса + "ВЫРАЗИТЬ(__Таблица.Регистратор КАК Документ." + ИмяРегистратора + ") КАК Регистратор";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "__Таблица." + Поле.Имя;
			КонецЕсли;
			
			ЭтоПервоеПоле = Ложь;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ " + ПутьТаблицы + " КАК __Таблица";	
		
		Если ЗначениеЗаполнено(ИмяРегистратора) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ __Таблица.Регистратор ССЫЛКА Документ." + ИмяРегистратора;		
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ 1 КАК Недоступно";
		
	КонецЕсли;

	Список.ТекстЗапроса = ТекстЗапроса;	
		
КонецПроцедуры

&НаСервере
Процедура НастроитьПоляНабораДанныхКомпоновкиДанных()
	
	Если СравнитьВерсии(ВерсияСовместимостиКонфигурации, "8.3.19.0") < 0 Тогда
		Возврат;
	КонецЕсли;
		
	Список.Поля.Очистить();
	Для Каждого ОписаниеПоля Из ОписаниеРегистра.ПоляЗаписи Цикл		
		 Поле = Список.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		 Поле.ПутьКДанным = ОписаниеПоля.Имя;
		 Поле.Поле = ОписаниеПоля.Имя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПолейСписка()
	
	Колич = Элементы.Список.ПодчиненныеЭлементы.Количество();
	Для к = 1 по Колич Цикл
		Элемент = Элементы.Список.ПодчиненныеЭлементы[Колич - к];
		Элементы.Удалить(Элемент);	
	КонецЦикла;
	
	Для Каждого ОписаниеПоля Из ОписаниеРегистра.ПоляЗаписи Цикл		
		НовыйЭлемент = Элементы.Добавить("Список" + ОписаниеПоля.Имя, Тип("ПолеФормы"), Элементы.Список);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "Список." + ОписаниеПоля.Имя;
		НовыйЭлемент.Заголовок = ОписаниеПоля.Заголовок;
	КонецЦикла;
	         
КонецПроцедуры

&НаСервере
Функция ПолучитьОтобранныеЗаписи()
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = Список.ТекстЗапроса;
	
	Для Каждого Поле Из ОписаниеРегистра.ПоляЗаписи Цикл	
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Заголовок 		= Поле.Заголовок;
		ПолеНабораДанных.ПутьКДанным 	= Поле.Имя;
		ПолеНабораДанных.Поле 			= Поле.Имя;
		ПолеНабораДанных.ТипЗначения 	= Поле.ТипЗначения;
	КонецЦикла;

	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(Список.КомпоновщикНастроек.Настройки);
	
	ГруппировкаКомпоновкиДанных = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));	
	Для Каждого Поле Из ОписаниеРегистра.ПоляЗаписи Цикл	
		ВыбранноеПолеКомпоновкиДанных = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(Поле.Имя);
	КонецЦикла;

    Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
        СоздатьЭлементОтбора(Компоновщик.Настройки.Отбор.Элементы, ЭлементОтбора);				
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныеСтроки()
	МассивСтрок = Новый Массив;
	
	Для Каждого Идентификатор Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(Идентификатор);
	
		ДанныеЗаписи = НоваяЗапись();
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ТекущиеДанные);

		МассивСтрок.Добавить(ДанныеЗаписи);
	КонецЦикла; 
	
	Возврат МассивСтрок;
КонецФункции

&НаСервере
Процедура СоздатьЭлементОтбора(ЭлементыОтбора, ЭлементОтбораИсточник)

    НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип(ЭлементОтбораИсточник));

    ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбораИсточник);

    Если Тип(ЭлементОтбораИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбораИсточник.Элементы.Количество() > 0 Тогда

        Для Каждого ЭлементОтбора Из ЭлементОтбораИсточник.Элементы Цикл

            СоздатьЭлементОтбора(НовыйЭлементОтбора.Элементы,ЭлементОтбора)

        КонецЦикла;

    КонецЕсли;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствие(Приемник, Источник)
	
	Для Каждого Элемент Из Источник Цикл
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКомандамиПользователя

&НаКлиенте
Процедура ОткрытьФормуВводаЗаписи(Действие, ДополнительныеПараметры = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Действие", Действие);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ПолучитьВыделенныеСтроки());
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыВводаЗаписи", ЭтотОбъект, ДополнительныеПараметры);
	
	ОтображатьФлажок = Ложь;
	ДанныеЗаписи = Неопределено;
	ЗаголовокОкна = "";
	Если Действие = "Добавить" Тогда
		ЗаголовокОкна = "Новая запись";	
	ИначеЕсли Действие = "Скопировать" Тогда
		ЗаголовокОкна = "Копирование записи";
		ДанныеЗаписи = ДополнительныеПараметры.ДанныеЗаписи;
	ИначеЕсли Действие = "Изменить" Тогда
		ЗаголовокОкна = "Изменение записи";
		ДанныеЗаписи = ДополнительныеПараметры.ДанныеЗаписи;
	ИначеЕсли Действие = "УстановитьЗначенияВыделенные" 
		Или Действие = "УстановитьЗначенияПоОтбору" Тогда
		ЗаголовокОкна = "Замена значений";
		ОтображатьФлажок = Истина;
	КонецЕсли;
	 
	ПутьКФорме = СтрЗаменить(ИмяФормы, ".ФормаОбработки", ".ФормаЗаписи");
	
	ПараметрыФормы.Вставить("ОписаниеРегистра", ОписаниеРегистра);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокОкна);
	ПараметрыФормы.Вставить("ОтображатьФлажок", ОтображатьФлажок);
	ПараметрыФормы.Вставить("ДанныеЗаписи", ДанныеЗаписи);
	
	ОткрытьФорму(ПутьКФорме, ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВводаЗаписи(ДанныеЗаписи, ДополнительныеПараметры) Экспорт
	
	Если ДанныеЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииФормыВводаЗаписиНаСервере(ДанныеЗаписи, ДополнительныеПараметры);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииФормыВводаЗаписиНаСервере(ДанныеЗаписи, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Действие = "Добавить"
		Или ДополнительныеПараметры.Действие = "Скопировать" Тогда
		
		Если ВыполнятьВТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		ДобавитьЗаписьНаСервере(ДанныеЗаписи);	
		
		Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Действие = "Изменить" Тогда
		
		Если ВыполнятьВТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли;

		ИзменитьЗаписьНаСервере(ДанныеЗаписи, ДополнительныеПараметры.ДанныеЗаписи);	
		
		Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Действие = "УстановитьЗначенияВыделенные" Тогда
		
		УстановитьЗначенияСтрокНаСервере(ДополнительныеПараметры.ВыделенныеСтроки, ДанныеЗаписи);
					
	ИначеЕсли ДополнительныеПараметры.Действие = "УстановитьЗначенияПоОтбору" Тогда
		
		УстановитьЗначенияПоОтборуНаСервере(ДанныеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбУдаленииВсехЗаписей(Ответ, ДополнительныеПараметры) Экспорт
		
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	УдалитьЗаписиПоОтборуНаСервере();	
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбУдаленииЗаписи(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтроки();
	
	УдалитьЗаписиНаСервере(ВыделенныеСтроки);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииСБазойДанных

&НаСервере
Процедура ДобавитьЗаписьНаСервере(ДанныеЗаписи) 
	
	Менеджер = ПолучитьМенеджерРегистра(ОписаниеРегистра);
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		Если Не ЗначениеЗаполнено(ДанныеЗаписи.Регистратор) Тогда
			ВызватьИсключение "Не заполнен регистратор"; 
		КонецЕсли;
		
		Замещать = ДанныеЗаписи.НомерСтроки > 0 Или РежимРазработчика;
		
		НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДанныеЗаписи.Регистратор);
		
		Если Замещать Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
	
		ЗаполнитьЗаписьРегистра(Запись, ДанныеЗаписи);
		
		Если ДанныеЗаписи.НомерСтроки > 0 И Запись.НомерСтроки <> ДанныеЗаписи.НомерСтроки Тогда
			Попытка
				НаборЗаписей.Сдвинуть(Запись, ДанныеЗаписи.НомерСтроки - ?(Запись.НомерСтроки = 0, НаборЗаписей.Количество(), Запись.НомерСтроки));
			Исключение
				ВызватьИсключение "Не удалось установить номер строки";	
			КонецПопытки;
		КонецЕсли;                                                                                                                          
		
		НаборЗаписей.ОбменДанными.Загрузка = РежимРазработчика;
		НаборЗаписей.Записать(Замещать);
	Иначе
		МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();	
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
		МенеджерЗаписи.Записать();           
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаписьНаСервере(ДанныеЗаписи, ИзменяемаяЗапись) 
		
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ИзменяемаяЗапись);
	УстановитьЗначенияСтрокНаСервере(МассивСтрок, ДанныеЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоОтборуНаСервере(НовыеЗначения)
	
	КоллекцияСтрок = ПолучитьОтобранныеЗаписи();
	УстановитьЗначенияСтрокНаСервере(КоллекцияСтрок, НовыеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияСтрокНаСервере(КоллекцияСтрок, НовыеЗначения)
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Менеджер = ПолучитьМенеджерРегистра(ОписаниеРегистра);
	
	СтруктураЗаписи = НоваяЗапись();
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		
		ЗаписиРегистраторов = Новый Соответствие;
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			МассивЗаписей = ЗаписиРегистраторов.Получить(ДанныеЗаписи.Регистратор);
			Если МассивЗаписей = Неопределено Тогда
				МассивЗаписей = Новый Массив;
				МассивЗаписей.Добавить(ДанныеЗаписи);
				ЗаписиРегистраторов.Вставить(ДанныеЗаписи.Регистратор, МассивЗаписей);	
			Иначе
				МассивЗаписей.Добавить(ДанныеЗаписи);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КлючЗапись Из ЗаписиРегистраторов Цикл
			НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(КлючЗапись.Ключ);
			НаборЗаписей.Прочитать();
						
			Для Каждого Строка Из КлючЗапись.Значение Цикл
				Запись = НаборЗаписей[Строка.НомерСтроки - 1];
				//@skip-check query-in-loop
				ЗаполнитьСтруктуруЗаписи(СтруктураЗаписи, Запись);
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, НовыеЗначения);				
				ЗаполнитьЗаписьРегистра(Запись, СтруктураЗаписи);
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = РежимРазработчика;
			НаборЗаписей.Записать();
		КонецЦикла;
	Иначе
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();	
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
			МенеджерЗаписи.Прочитать();  
			Если МенеджерЗаписи.Выбран() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, МенеджерЗаписи);
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, НовыеЗначения);				
				ЗаполнитьЗаписьРегистра(МенеджерЗаписи, СтруктураЗаписи);	
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиНаСервере(КоллекцияСтрок)
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Менеджер = ПолучитьМенеджерРегистра(ОписаниеРегистра);
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		
		МассивРегистраторов = Новый Массив;
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			Если МассивРегистраторов.Найти(ДанныеЗаписи.Регистратор) = Неопределено Тогда
				МассивРегистраторов.Добавить(ДанныеЗаписи.Регистратор);	
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Регистратор Из МассивРегистраторов Цикл
			НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Прочитать();
			
			УдаляемыеНомераСтрок = Новый Массив;
			Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
				Если ДанныеЗаписи.Регистратор = Регистратор Тогда
					УдаляемыеНомераСтрок.Добавить(ДанныеЗаписи.НомерСтроки);		
				КонецЕсли;
			КонецЦикла;
			
			УдаляемыеЗаписи = Новый Массив;
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не УдаляемыеНомераСтрок.Найти(Запись.НомерСтроки) = Неопределено Тогда
					УдаляемыеЗаписи.Добавить(Запись);
				КонецЕсли;
			КонецЦикла;
			
			Если Не УдаляемыеНомераСтрок.Количество() = УдаляемыеЗаписи.Количество() Тогда
				ВызватьИсключение "Не удалось найти все данные для удаления";	
			КонецЕсли;
			
			Для Каждого Запись Из УдаляемыеЗаписи Цикл
				НаборЗаписей.Удалить(Запись);	
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = РежимРазработчика;
			НаборЗаписей.Записать();
		КонецЦикла;
	Иначе
		УдаляемыеЗаписи = Новый Массив;
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();	
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЕсли;	
	
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиПоОтборуНаСервере()
	
	КоллекцияСтрок = ПолучитьОтобранныеЗаписи();
	УдалитьЗаписиНаСервере(КоллекцияСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаписьРегистра(ЗаписьРегистра, ДанныеЗаписи)
	
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеЗаписи);
	
	Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда			
		КорреспонденцииСчетов = КорреспонденцииСчетов();
		
		Для НомерСубконто = 1 по ОписаниеРегистра.МаксКоличествоСубконто Цикл
			Для Каждого КорреспонденцияСчета Из КорреспонденцииСчетов Цикл
				ВидСубконто = ДанныеЗаписи["ВидСубконто" + КорреспонденцияСчета + НомерСубконто];
				ЗначениеСубконто = ДанныеЗаписи["Субконто" + КорреспонденцияСчета + НомерСубконто]; 
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					ЗаписьРегистра["Субконто" + КорреспонденцияСчета][ВидСубконто] = ЗначениеСубконто;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗаписи(ДанныеЗаписи, ЗаписьРегистра)
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ЗаписьРегистра);
	
	Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда			
		КорреспонденцииСчетов = КорреспонденцииСчетов();
		
		Для Каждого КорреспонденцияСчета Из КорреспонденцииСчетов Цикл
			
			Для НомерСубконто = 1 по ОписаниеРегистра.МаксКоличествоСубконто Цикл
				ДанныеЗаписи["ВидСубконто" + КорреспонденцияСчета + НомерСубконто] = Неопределено;
				ДанныеЗаписи["Субконто" + КорреспонденцияСчета + НомерСубконто] = Неопределено;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ЗаписьРегистра["Счет" + КорреспонденцияСчета]) Тогда
				Продолжить;
			КонецЕсли;
			
			//@skip-check query-in-loop
			ВидыСубконто = ПолучитьВидыСубконтоСчета(ЗаписьРегистра["Счет" + КорреспонденцияСчета]);
			
			Для Каждого ОписаниеВидаСубконто Из ВидыСубконто Цикл
				ДанныеЗаписи["ВидСубконто" + КорреспонденцияСчета + ОписаниеВидаСубконто.НомерСтроки] = ОписаниеВидаСубконто.Ссылка;
				ДанныеЗаписи["Субконто" + КорреспонденцияСчета + ОписаниеВидаСубконто.НомерСтроки] = ЗаписьРегистра["Субконто" + КорреспонденцияСчета][ОписаниеВидаСубконто.Ссылка]; 
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидыСубконтоСчета(Счет)
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидыСубконтоСчетов = Неопределено Тогда	
		ВидыСубконтоСчетов = Новый ФиксированноеСоответствие(Новый Соответствие());
	КонецЕсли;
	
	ВидыСубконто = ВидыСубконтоСчетов.Получить(Счет);
	Если ВидыСубконто <> Неопределено Тогда
		Возврат ВидыСубконто;
	КонецЕсли;
	
	НовыйВидыСубконтоСчетов = Новый Соответствие();	
	ДополнитьСоответствие(НовыйВидыСубконтоСчетов, ВидыСубконтоСчетов);
	
	ИмяТаблицы = Счет.Метаданные().Имя;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СчетаВидыСубконто.Ссылка КАК Счет,
	|	СчетаВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	СчетаВидыСубконто.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ПланСчетов." + ИмяТаблицы + ".ВидыСубконто КАК СчетаВидыСубконто
	|ИТОГИ ПО
	|	Счет");
	ВыборкаСчет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСчет.Следующий() Цикл
		ВидыСубконто = Новый Массив;
	
		Выборка = ВыборкаСчет.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеВидаСубконто = Новый Структура;
			ОписаниеВидаСубконто.Вставить("Ссылка", Выборка.ВидСубконто);
			ОписаниеВидаСубконто.Вставить("НомерСтроки", Выборка.НомерСтроки);
			ВидыСубконто.Добавить(ОписаниеВидаСубконто);
		КонецЦикла;
		
		НовыйВидыСубконтоСчетов.Вставить(ВыборкаСчет.Счет, ВидыСубконто);
	КонецЦикла;
	
	ВидыСубконтоСчетов = Новый ФиксированноеСоответствие(НовыйВидыСубконтоСчетов);
	
	Возврат ВидыСубконтоСчетов[Счет];
	
КонецФункции

#КонецОбласти

#КонецОбласти