#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВерсияСовместимостиКонфигурации = ВерсияСовместимостиКонфигурации();
	
	ИнициализироватьСписокРегистров();
	
	ВыполнятьВТранзакции = Истина;
	ОбменДаннымиЗагрузка = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолноеИмяПриИзменении(Элемент)
	
	ИмяРегистратора = "";	
	ОписаниеРегистра = ПолучитьОписаниеРегистра(ПолноеИмяРегистра);
	УстановитьСписокВыбораРегистраторов();
	НастроитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРегистратораПриИзменении(Элемент)
	НастроитьСписок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);		
	ДанныеЗаписи  = ПолучитьДанныеСтрокиСписка(ТекущиеДанные);
	
	ОткрытьФормуВводаЗаписи("Изменить", Новый Структура("ДанныеЗаписи", ДанныеЗаписи));	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьЗапись(Команда)
	
	ОткрытьФормуВводаЗаписи("Добавить");	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапись(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = ПолучитьДанныеСтрокиСписка(ТекущиеДанные);
	
	ОткрытьФормуВводаЗаписи("Скопировать", Новый Структура("ДанныеЗаписи", ДанныеЗаписи));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеЗаписи(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбУдаленииЗаписи", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Подтвердите удаление записей", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписиПоОтбору(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбУдаленииВсехЗаписей", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Подтвердите удаление записей", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапись(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = ПолучитьДанныеСтрокиСписка(ТекущиеДанные);
	
	ОткрытьФормуВводаЗаписи("Изменить", Новый Структура("ДанныеЗаписи", ДанныеЗаписи));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияВыделенные(Команда)
			
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВводаЗаписи("УстановитьЗначенияВыделенные");	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПоОтбору(Команда)
	
	ОткрытьФормуВводаЗаписи("УстановитьЗначенияПоОтбору");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьСписокРегистров()

	НовоеОписаниеРегистров = Новый Соответствие();
	
	Элементы.ПолноеИмяРегистра.СписокВыбора.Очистить();
 	
	ПрочитатьРегистры(Метаданные.РегистрыСведений, НовоеОписаниеРегистров);
	ПрочитатьРегистры(Метаданные.РегистрыНакопления, НовоеОписаниеРегистров);
	ПрочитатьРегистры(Метаданные.РегистрыБухгалтерии, НовоеОписаниеРегистров);
	
	ОписаниеРегистров = Новый ФиксированноеСоответствие(НовоеОписаниеРегистров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораРегистраторов()
	
	СписокВыбора = Элементы.ИмяРегистратора.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		Элемент = НайтиЭлементКоллекцииПоКлючу(ОписаниеРегистра.Реквизиты, "Имя", "Регистратор");
		Типы = Элемент.ТипЗначения.Типы();
		Для Каждого Тип Из Типы Цикл
			Ссылка = Новый(Тип);	
			МетаданныеОбъекта = Ссылка.Метаданные();
			СписокВыбора.Добавить(МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним,, БиблиотекаКартинок.Документ);
		КонецЦикла;
	КонецЕсли;
	
	СписокВыбора.СортироватьПоПредставлению();
	
	Элементы.ИмяРегистратора.Доступность = СписокВыбора.Количество();
	
КонецПроцедуры

&НаСервере
Функция НайтиЭлементКоллекцииПоКлючу(КоллекцияЭлементов, Ключ, Значение)
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если Элемент[Ключ] = Значение Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ВерсияСовместимостиКонфигурации()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	РежимСовместимости = Метаданные.РежимСовместимости;
	
	Если РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		ВерсияРежимаСовместимости = СистемнаяИнформация.ВерсияПриложения;
	Иначе
		ВерсияРежимаСовместимости = СтрСоединить(СтрРазделить(РежимСовместимости, СтрСоединить(СтрРазделить(РежимСовместимости, "1234567890", Ложь), ""), Ложь), ".") + ".0";
	КонецЕсли;
	
	Возврат ВерсияРежимаСовместимости;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаСервере
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра %1: %2'"), "СтрокаВерсии1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
	    	НСтр("ru = 'Неправильный формат параметра %1: %2'"), "СтрокаВерсии2", СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#Область РаботаСМетаданными

// Читает регистры.
// 
// Параметры:
//  КоллекцияОбъектовМетаданных - КоллекцияОбъектовМетаданных - Коллекция объектов метаданных
//  ОписаниеРегистров - Соответствие из КлючИЗначение - Описание регистров
&НаСервере
Процедура ПрочитатьРегистры(КоллекцияОбъектовМетаданных, ОписаниеРегистров)
	
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		ОписаниеРегистра = ПрочитатьРегистр(ОбъектМетаданных);
				
		ОписаниеРегистров.Вставить(ОписаниеРегистра.ПолноеИмя, ОписаниеРегистра);
		
		Элементы.ПолноеИмяРегистра.СписокВыбора.Добавить(ОписаниеРегистра.ПолноеИмя, 
			ОписаниеРегистра.Синоним,,
			КартинкаРегистра(ОписаниеРегистра));		
	КонецЦикла;

КонецПроцедуры

// Возвращает описание регистра.
// 
// Параметры:
//  ОбъектМетаданных	- ОбъектМетаданныхРегистрСведений
//  					- ОбъектМетаданныхРегистрНакопления
//  					- ОбъектМетаданныхРегистрБухгалтерии
//  					- ОбъектМетаданныхРегистрРасчета - Объект метаданных
//
// Возвращаемое значение:
//	см. НовоеОписаниеРегистра
&НаСервере
Функция ПрочитатьРегистр(ОбъектМетаданных)
	
	ОписаниеРегистра = НовоеОписаниеРегистра();
	ОписаниеРегистра.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	ОписаниеРегистра.Синоним = ОбъектМетаданных.Синоним;
	ОписаниеРегистра.Имя = ОбъектМетаданных.Имя;
	ОписаниеРегистра.Тип = ТипРегистраПоПолномуИмени(ОписаниеРегистра.ПолноеИмя);
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		И Строка(ОбъектМетаданных.РежимЗаписи) = "Независимый" Тогда
		ОписаниеРегистра.ПодчинениеРегистратору = Ложь;	
	Иначе
		ОписаниеРегистра.ПодчинениеРегистратору = Истина;
	КонецЕсли;
	
	Если Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		ОписаниеРегистра.Корреспонденция = ОбъектМетаданных.Корреспонденция;	
		ОписаниеРегистра.МаксКоличествоСубконто = ОбъектМетаданных.ПланСчетов.МаксКоличествоСубконто;
	КонецЕсли;

	Возврат ОписаниеРегистра;
			
КонецФункции

// Прочитать реквизиты регистра.
// 
// Параметры:
//  ОписаниеРегистра - см. НовоеОписаниеРегистра
&НаСервере
Процедура ПрочитатьРеквизитыРегистра(ОписаниеРегистра)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеРегистра.ПолноеИмя);
	
	РеквизитыРегистра = Новый Массив;	
			
	ПорядокРеквизита = 0;		
	Для Каждого ТипРеквизита Из ТипыРеквизитов() Цикл
		
		Для Каждого Реквизит Из ОбъектМетаданных[ТипРеквизита] Цикл
			
			ПорядокРеквизита = ПорядокРеквизита + 1;
			
			ОписаниеРеквизита = НовоеОписаниеРеквизитаРегистра();
			ОписаниеРеквизита.Имя = Реквизит.Имя;
			ОписаниеРеквизита.Тип = ТипРеквизита;
			ОписаниеРеквизита.ТипЗначения = Реквизит.Тип;
			
			Если ТипРеквизита = "СтандартныеРеквизиты" И СтрНайти(Реквизит.Имя, "Субконто") Тогда
				ОписаниеРеквизита.Порядок = 50;
			Иначе
				ОписаниеРеквизита.Порядок = ПорядокРеквизита;
			КонецЕсли;
		
			РеквизитыРегистра.Добавить(ОписаниеРеквизита);
				
		КонецЦикла;			
		
		ПорядокРеквизита = ПорядокРеквизита + 50;
		
	КонецЦикла;				
	
	Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда
		ОписаниеРеквизита = НовоеОписаниеРеквизитаРегистра();
		ОписаниеРеквизита.Имя = "Счет";
		ОписаниеРеквизита.Порядок = 50;
		ОписаниеРеквизита.Тип = "СтандартныеРеквизиты";
		ОписаниеРеквизита.ТипЗначения = Новый ОписаниеТипов("ПланСчетовСсылка." + ОбъектМетаданных.ПланСчетов.Имя);
		РеквизитыРегистра.Добавить(ОписаниеРеквизита);					
	КонецЕсли;
	
	ОписаниеРегистра.Реквизиты = РеквизитыРегистра;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеРегистра(ПолноеИмя)
	
	ОписаниеРегистра = ОписаниеРегистров[ПолноеИмя];
	
	Если ОписаниеРегистра = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;

	Если ОписаниеРегистра.Реквизиты.Количество() = 0 Тогда
		ПрочитатьРеквизитыРегистра(ОписаниеРегистра);
	КонецЕсли;
	
	Возврат ОписаниеРегистра;
				
КонецФункции

&НаСервере
Функция ПолучитьМенеджерРегистра(ОписаниеРегистра)
	
	Если ЭтоРегистрСведений(ОписаниеРегистра) Тогда
		Возврат РегистрыСведений[ОписаниеРегистра.Имя];
	ИначеЕсли ЭтоРегистрНакопления(ОписаниеРегистра) Тогда
		Возврат РегистрыНакопления[ОписаниеРегистра.Имя];
	ИначеЕсли ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда
		Возврат РегистрыБухгалтерии[ОписаниеРегистра.Имя];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КартинкаРегистра(ОписаниеРегистра)
	Возврат БиблиотекаКартинок[ОписаниеРегистра.Тип];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРегистрСведений(ОписаниеРегистра)
	Возврат ОписаниеРегистра.Тип = "РегистрСведений";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРегистрНакопления(ОписаниеРегистра)
	Возврат ОписаниеРегистра.Тип = "РегистрНакопления";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРегистрБухгалтерии(ОписаниеРегистра)
	Возврат ОписаниеРегистра.Тип = "РегистрБухгалтерии";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипРегистраПоПолномуИмени(ПолноеИмя)
	Возврат Лев(ПолноеИмя, СтрНайти(ПолноеИмя, ".") - 1);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыРеквизитов()
	Массив = Новый Массив;
	Массив.Добавить("СтандартныеРеквизиты");
	Массив.Добавить("Измерения");
	Массив.Добавить("Ресурсы");
	Массив.Добавить("Реквизиты");
	Возврат Массив;
КонецФункции

// Новое описание регистра.
// 
// Возвращаемое значение:
//  Структура:
//  	Для всех регистров
//			* ПолноеИмя - Строка - Полное имя регистра
//			* Синоним - Строка - Синоним
//			* Имя - Строка - Имя
//			* Тип - Строка - Тип регистра. Возможные варианты: РегистрСведений, РегистрНакопления, РегистрБухгалтерии
//			* ПодчинениеРегистратору - Булево - Подчинен регистратору
//			* Реквизиты - Массив из см. НовоеОписаниеРеквизитаРегистра - Реквизиты регистра
//		
//		Для регистра бухгалтерии
//			* Корреспонденция - Булево - Корреспонденция
//			* МаксКоличествоСубконто - Число - Максимальное количество субконто
&НаСервере
Функция НовоеОписаниеРегистра()
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ПолноеИмя", "");
	ОписаниеРегистра.Вставить("Синоним", "");
	ОписаниеРегистра.Вставить("Имя", "");
	ОписаниеРегистра.Вставить("Тип", "");
	ОписаниеРегистра.Вставить("ПодчинениеРегистратору", Ложь);
	ОписаниеРегистра.Вставить("Корреспонденция", Ложь);	
	ОписаниеРегистра.Вставить("МаксКоличествоСубконто", 0);	
	ОписаниеРегистра.Вставить("Реквизиты", Новый Соответствие());	
	Возврат ОписаниеРегистра;
КонецФункции

&НаСервере
Функция НовоеОписаниеРеквизитаРегистра()
	ОписаниеРеквизита = Новый Структура();
	ОписаниеРеквизита.Вставить("Имя", "");
	ОписаниеРеквизита.Вставить("Порядок", 0);
	ОписаниеРеквизита.Вставить("Тип", "");
	ОписаниеРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов());	
	Возврат ОписаниеРеквизита;
КонецФункции

#КонецОбласти

#Область РаботаСоСписком

&НаСервере
Процедура НастроитьСписок()
	УстановитьТекстЗапроса();
	НастроитьПоляНабораДанныхКомпановкиДанных();
	ДобавитьЭлементыПолейСписка();
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапроса()
	
	Если ОписаниеРегистра = Неопределено Тогда
		Список.ТекстЗапроса = "";
		Возврат;
	КонецЕсли;
	
	ПутьТаблицы = "";
	Если ЭтоРегистрСведений(ОписаниеРегистра) Тогда
		ПутьТаблицы = ОписаниеРегистра.ПолноеИмя;	
	ИначеЕсли ЭтоРегистрНакопления(ОписаниеРегистра) Тогда
		ПутьТаблицы = ОписаниеРегистра.ПолноеИмя;
	ИначеЕсли ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда
		ПутьТаблицы = ОписаниеРегистра.ПолноеИмя + ".ДвиженияССубконто";
	КонецЕсли;

	Список.ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + ПутьТаблицы;
	
	Поля = ПолучитьПоля();
	
	ТекстЗапроса = "";	
	Если Поля.Количество() > 0 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ ";
		
		ЭтоПервоеПоле = Истина;
		Для Каждого Поле Из Поля Цикл
			
			Если Не ЭтоПервоеПоле Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяРегистратора)
				И Поле.Имя = "Регистратор" Тогда
				ТекстЗапроса = ТекстЗапроса + "ВЫРАЗИТЬ(__Таблица.Регистратор КАК Документ." + ИмяРегистратора + ") КАК Регистратор";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "__Таблица." + Поле.Имя;
			КонецЕсли;
			
			ЭтоПервоеПоле = Ложь;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ " + ПутьТаблицы + " КАК __Таблица";	
		
		Если ЗначениеЗаполнено(ИмяРегистратора) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ __Таблица.Регистратор ССЫЛКА Документ." + ИмяРегистратора;		
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ 1 КАК Недоступно";
		
	КонецЕсли;

	Список.ТекстЗапроса = ТекстЗапроса;	
		
КонецПроцедуры

&НаСервере
Процедура НастроитьПоляНабораДанныхКомпановкиДанных()
	
	Если СравнитьВерсии(ВерсияСовместимостиКонфигурации, "8.3.19.0") < 0 Тогда
		Возврат;
	КонецЕсли;
	
	Поля = ПолучитьПоля();
	
	Список.Поля.Очистить();
	Для Каждого ОписаниеПоля Из Поля Цикл		
		 Поле = Список.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		 Поле.ПутьКДанным = ОписаниеПоля.Имя;
		 Поле.Поле = ОписаниеПоля.Имя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПолейСписка()
	
	Колич = Элементы.Список.ПодчиненныеЭлементы.Количество();
	Для к = 1 по Колич Цикл
		Элемент = Элементы.Список.ПодчиненныеЭлементы[Колич - к];
		Элементы.Удалить(Элемент);	
	КонецЦикла;
	
	Поля = ПолучитьПоля();
	
	Для Каждого ОписаниеПоля Из Поля Цикл		
		НовыйЭлемент = Элементы.Добавить("Список" + ОписаниеПоля.Имя, Тип("ПолеФормы"), Элементы.Список);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "Список." + ОписаниеПоля.Имя;
		НовыйЭлемент.Заголовок = ОписаниеПоля.Заголовок;
	КонецЦикла;
	         
КонецПроцедуры

&НаСервере
Функция ПолучитьОтобранныеЗаписи()
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = Список.ТекстЗапроса;
	
	
	СписокПолей = ПолучитьПоля();	
	Для Каждого Поле Из СписокПолей Цикл	
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Заголовок 		= Поле.Заголовок;
		ПолеНабораДанных.ПутьКДанным 	= Поле.Имя;
		ПолеНабораДанных.Поле 			= Поле.Имя;
		ПолеНабораДанных.ТипЗначения 	= Поле.ТипЗначения;
	КонецЦикла;

	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(Список.КомпоновщикНастроек.Настройки);
	
	ГруппировкаКомпоновкиДанных = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));	
	Для Каждого Поле Из СписокПолей Цикл	
		ВыбранноеПолеКомпоновкиДанных = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(Поле.Имя);
	КонецЦикла;

    Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
        СоздатьЭлементОтбора(Компоновщик.Настройки.Отбор.Элементы, ЭлементОтбора);				
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныеСтроки()	
	МассивСтрок = Новый Массив;
	Для Каждого Идентификатор Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(Идентификатор);
		ДанныеЗаписи  = ПолучитьДанныеСтрокиСписка(ТекущиеДанные);
		МассивСтрок.Добавить(ДанныеЗаписи);
	КонецЦикла; 
	Возврат МассивСтрок;
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСтрокиСписка(ТекущиеДанные)
	
	Результат = Новый Структура;
	
	Поля = ПолучитьПоля();
	
	Для Каждого ОписаниеПоля Из Поля Цикл		
		Результат.Вставить(ОписаниеПоля.Имя, ТекущиеДанные[ОписаниеПоля.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементОтбора(ЭлементыОтбора, ЭлементОтбораИсточник)

    НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип(ЭлементОтбораИсточник));

    ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбораИсточник);

    Если Тип(ЭлементОтбораИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбораИсточник.Элементы.Количество() > 0 Тогда

        Для Каждого ЭлементОтбора Из ЭлементОтбораИсточник.Элементы Цикл

            СоздатьЭлементОтбора(НовыйЭлементОтбора.Элементы,ЭлементОтбора)

        КонецЦикла;

    КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ПолучитьПоля()
	
	СписокПолей = Новый СписокЗначений;
	
	Для Каждого ПолеКомпановки Из Список.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ПолеКомпановки.Папка Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ПолеКомпановки.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = Строка(ПолеКомпановки.Поле);
		
		ОписаниеПоля = Новый Структура;
		ОписаниеПоля.Вставить("Имя", ИмяПоля);
		ОписаниеПоля.Вставить("Заголовок", ПолеКомпановки.Заголовок);
		ОписаниеПоля.Вставить("ТипЗначения", ПолеКомпановки.ТипЗначения);
			
		ИмяПоляБезСуф = ИмяПоля;
		Если СтрНайти(ИмяПоляБезСуф, "Дт")
			Или СтрНайти(ИмяПоляБезСуф, "Кт") Тогда
			Индекс = Макс(СтрНайти(ИмяПоляБезСуф, "Дт"), СтрНайти(ИмяПоляБезСуф, "Кт")); 
			ИмяПоляБезСуф = Сред(ИмяПоляБезСуф, 1, Индекс - 1) + Сред(ИмяПоляБезСуф, Индекс + 2); 	
		КонецЕсли;
		
		Порядок = 0;
		Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл			
			Если Реквизит.Имя = ИмяПоляБезСуф
				Или Реквизит.Имя = ИмяПоля Тогда
				Порядок = Реквизит.Порядок;	
			КонецЕсли;
		КонецЦикла;
		
		Если Порядок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПолей.Добавить(ОписаниеПоля, Формат(Порядок, "ЧЦ=3; ЧВН=") + ИмяПоля);
			
	КонецЦикла;
	
	СписокПолей.СортироватьПоПредставлению();
	
	Поля = Новый Массив;
	Для Каждого Строка Из СписокПолей Цикл
		Поля.Добавить(Строка.Значение);	
	КонецЦикла;
	
	Возврат Поля;
	
КонецФункции

&НаСервере 
Функция ПустаяСтруктураПолей()
	
	Поля = ПолучитьПоля();
	СтруктураПолей = Новый Структура;
	
	Для Каждого ОписаниеПоля Из Поля Цикл	
		СтруктураПолей.Вставить(ОписаниеПоля.Имя, ОписаниеПоля.ТипЗначения.ПривестиЗначение());	
	КонецЦикла;
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствие(Приемник, Источник)
	
	Для Каждого Элемент Из Источник Цикл
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКомандамиПользователя

&НаКлиенте
Процедура ОткрытьФормуВводаЗаписи(Действие, ДополнительныеПараметры = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Действие", Действие);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ПолучитьВыделенныеСтроки());
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыВводаЗаписи", ЭтотОбъект, ДополнительныеПараметры);
	
	ОтображатьФлажок = Ложь;
	ДанныеЗаписи = Неопределено;
	ЗаголовокОкна = "";
	Если Действие = "Добавить" Тогда
		ЗаголовокОкна = "Новая запись";	
	ИначеЕсли Действие = "Скопировать" Тогда
		ЗаголовокОкна = "Копирование записи";
		ДанныеЗаписи = ДополнительныеПараметры.ДанныеЗаписи;
	ИначеЕсли Действие = "Изменить" Тогда
		ЗаголовокОкна = "Изменение записи";
		ДанныеЗаписи = ДополнительныеПараметры.ДанныеЗаписи;
	ИначеЕсли Действие = "УстановитьЗначенияВыделенные" 
		Или Действие = "УстановитьЗначенияПоОтбору" Тогда
		ЗаголовокОкна = "Замена значений";
		ОтображатьФлажок = Истина;
	КонецЕсли;
	 
	ПутьКФорме = СтрЗаменить(ИмяФормы, ".ФормаОбработки", ".ФормаЗаписи");
	
	ПараметрыФормы.Вставить("Поля",   ПолучитьПоля());
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокОкна);
	ПараметрыФормы.Вставить("ОтображатьФлажок", ОтображатьФлажок);
	ПараметрыФормы.Вставить("ДанныеЗаписи", ДанныеЗаписи);
	
	ОткрытьФорму(ПутьКФорме, ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВводаЗаписи(ДанныеЗаписи, ДополнительныеПараметры) Экспорт
	
	Если ДанныеЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииФормыВводаЗаписиНаСервере(ДанныеЗаписи, ДополнительныеПараметры);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииФормыВводаЗаписиНаСервере(ДанныеЗаписи, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Действие = "Добавить"
		Или ДополнительныеПараметры.Действие = "Скопировать" Тогда
		
		Если ВыполнятьВТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		ДобавитьЗаписьНаСервере(ДанныеЗаписи);	
		
		Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Действие = "Изменить" Тогда
		
		Если ВыполнятьВТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли;

		ИзменитьЗаписьНаСервере(ДанныеЗаписи, ДополнительныеПараметры.ДанныеЗаписи);	
		
		Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Действие = "УстановитьЗначенияВыделенные" Тогда
		
		УстановитьЗначенияСтрокНаСервере(ДополнительныеПараметры.ВыделенныеСтроки, ДанныеЗаписи);
					
	ИначеЕсли ДополнительныеПараметры.Действие = "УстановитьЗначенияПоОтбору" Тогда
		
		УстановитьЗначенияПоОтборуНаСервере(ДанныеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбУдаленииВсехЗаписей(Ответ, ДополнительныеПараметры) Экспорт
		
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	УдалитьЗаписиПоОтборуНаСервере();	
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбУдаленииЗаписи(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтроки();
	
	УдалитьЗаписиНаСервере(ВыделенныеСтроки);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииСБазойДанных

&НаСервере
Процедура ДобавитьЗаписьНаСервере(ДанныеЗаписи) 
	
	Менеджер = ПолучитьМенеджерРегистра(ОписаниеРегистра);
	Если Менеджер = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не определен менеджер регистра %1", ОписаниеРегистра.Имя);
	КонецЕсли;
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		Если Не ЗначениеЗаполнено(ДанныеЗаписи.Регистратор) Тогда
			ВызватьИсключение "Не заполнен регистратор"; 
		КонецЕсли;
		
		НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДанныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей.Добавить();
	
		ЗаполнитьЗаписьДанными(Запись, ДанныеЗаписи, ОписаниеРегистра);
		
		Если ДанныеЗаписи.НомерСтроки > 0
			И Запись.НомерСтроки <> ДанныеЗаписи.НомерСтроки Тогда
			Попытка
				НаборЗаписей.Сдвинуть(Запись, ДанныеЗаписи.НомерСтроки - ?(Запись.НомерСтроки = 0, НаборЗаписей.Количество(), Запись.НомерСтроки));
			Исключение
				ВызватьИсключение "Не удалось установить номер строки";	
			КонецПопытки;
		КонецЕсли;                                                                                                                          
		
		НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
		НаборЗаписей.Записать();
	Иначе
		МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();	
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
		МенеджерЗаписи.Записать();           
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаписьНаСервере(ДанныеЗаписи, ИзменяемаяЗапись) 
		
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ИзменяемаяЗапись);
	УстановитьЗначенияСтрокНаСервере(МассивСтрок, ДанныеЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоОтборуНаСервере(НовыеЗначения)
	
	КоллекцияСтрок = ПолучитьОтобранныеЗаписи();
	УстановитьЗначенияСтрокНаСервере(КоллекцияСтрок, НовыеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияСтрокНаСервере(КоллекцияСтрок, НовыеЗначения)
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Менеджер = ПолучитьМенеджерРегистра(ОписаниеРегистра);
	
	СтруктураЗаписи = ПустаяСтруктураПолей();
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		
		ЗаписиРегистраторов = Новый Соответствие;
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			МассивЗаписей = ЗаписиРегистраторов.Получить(ДанныеЗаписи.Регистратор);
			Если МассивЗаписей = Неопределено Тогда
				МассивЗаписей = Новый Массив;
				МассивЗаписей.Добавить(ДанныеЗаписи);
				ЗаписиРегистраторов.Вставить(ДанныеЗаписи.Регистратор, МассивЗаписей);	
			Иначе
				МассивЗаписей.Добавить(ДанныеЗаписи);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КлючЗапись Из ЗаписиРегистраторов Цикл
			НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(КлючЗапись.Ключ);
			НаборЗаписей.Прочитать();
						
			Для Каждого Строка Из КлючЗапись.Значение Цикл
				Запись = НаборЗаписей[Строка.НомерСтроки - 1];
				//@skip-check query-in-loop
				ЗаполнитьСтруктуруЗаписьюРегистра(СтруктураЗаписи, Запись, ОписаниеРегистра);
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, НовыеЗначения);				
				ЗаполнитьЗаписьДанными(Запись, СтруктураЗаписи, ОписаниеРегистра);
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
			НаборЗаписей.Записать();
		КонецЦикла;
	Иначе
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();	
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
			МенеджерЗаписи.Прочитать();  
			Если МенеджерЗаписи.Выбран() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, МенеджерЗаписи);
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, НовыеЗначения);				
				ЗаполнитьЗаписьДанными(МенеджерЗаписи, СтруктураЗаписи, ОписаниеРегистра);	
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиНаСервере(КоллекцияСтрок)
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Менеджер = ПолучитьМенеджерРегистра(ОписаниеРегистра);
	
	Если ОписаниеРегистра.ПодчинениеРегистратору Тогда
		
		МассивРегистраторов = Новый Массив;
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			Если МассивРегистраторов.Найти(ДанныеЗаписи.Регистратор) = Неопределено Тогда
				МассивРегистраторов.Добавить(ДанныеЗаписи.Регистратор);	
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Регистратор Из МассивРегистраторов Цикл
			НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Прочитать();
			
			УдаляемыеНомераСтрок = Новый Массив;
			Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
				Если ДанныеЗаписи.Регистратор = Регистратор Тогда
					УдаляемыеНомераСтрок.Добавить(ДанныеЗаписи.НомерСтроки);		
				КонецЕсли;
			КонецЦикла;
			
			УдаляемыеЗаписи = Новый Массив;
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не УдаляемыеНомераСтрок.Найти(Запись.НомерСтроки) = Неопределено Тогда
					УдаляемыеЗаписи.Добавить(Запись);
				КонецЕсли;
			КонецЦикла;
			
			Если Не УдаляемыеНомераСтрок.Количество() = УдаляемыеЗаписи.Количество() Тогда
				ВызватьИсключение "Не удалось найти все данные для удаления";	
			КонецЕсли;
			
			Для Каждого Запись Из УдаляемыеЗаписи Цикл
				НаборЗаписей.Удалить(Запись);	
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
			НаборЗаписей.Записать();
		КонецЦикла;
	Иначе
		УдаляемыеЗаписи = Новый Массив;
		Для Каждого ДанныеЗаписи Из КоллекцияСтрок Цикл
			МенеджерЗаписи = Менеджер.СоздатьМенеджерЗаписи();	
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЕсли;	
	
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиПоОтборуНаСервере()
	
	КоллекцияСтрок = ПолучитьОтобранныеЗаписи();
	УдалитьЗаписиНаСервере(КоллекцияСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаписьДанными(Запись, ДанныеЗаписи, ОписаниеРегистра)
	
	ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
	
	Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда			
		СуффиксыСубконто = Новый Массив;
		Если ОписаниеРегистра.Корреспонденция Тогда 
			СуффиксыСубконто.Добавить("Дт");	
			СуффиксыСубконто.Добавить("Кт");	
		Иначе
			СуффиксыСубконто.Добавить("");	
		КонецЕсли;
		
		Для НомерСубконто = 1 по ОписаниеРегистра.МаксКоличествоСубконто Цикл
			Для Каждого СуффиксСубконто Из СуффиксыСубконто Цикл
				ВидСубконто = ДанныеЗаписи["ВидСубконто" + СуффиксСубконто + НомерСубконто];
				ЗначениеСубконто = ДанныеЗаписи["Субконто" + СуффиксСубконто + НомерСубконто]; 
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					Запись["Субконто" + СуффиксСубконто][ВидСубконто] = ЗначениеСубконто;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗаписьюРегистра(СтруктураЗаписи, Запись, ОписаниеРегистра)
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Запись);
	
	Если ЭтоРегистрБухгалтерии(ОписаниеРегистра) Тогда			
		СуффиксыСубконто = Новый Массив;
		Если ОписаниеРегистра.Корреспонденция Тогда 
			СуффиксыСубконто.Добавить("Дт");	
			СуффиксыСубконто.Добавить("Кт");	
		Иначе
			СуффиксыСубконто.Добавить("");	
		КонецЕсли;
		
		Для Каждого СуффиксСубконто Из СуффиксыСубконто Цикл
			
			//@skip-check query-in-loop
			ВидыСубконто = ПолучитьВидыСубконтоСчета(Запись["Счет" + СуффиксСубконто]);
			
			Для Каждого ОписаниеВидаСубконто Из ВидыСубконто Цикл
				СтруктураЗаписи["ВидСубконто" + СуффиксСубконто + ОписаниеВидаСубконто.НомерСтроки] = ОписаниеВидаСубконто.Ссылка;
				СтруктураЗаписи["Субконто" + СуффиксСубконто + ОписаниеВидаСубконто.НомерСтроки] = Запись["Субконто" + СуффиксСубконто][ОписаниеВидаСубконто.Ссылка]; 
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидыСубконтоСчета(Счет)
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидыСубконтоСчетов = Неопределено Тогда	
		ВидыСубконтоСчетов = Новый ФиксированноеСоответствие(Новый Соответствие());
	КонецЕсли;
	
	ВидыСубконто = ВидыСубконтоСчетов[Счет];
	Если ВидыСубконто <> Неопределено Тогда
		Возврат ВидыСубконто;
	КонецЕсли;
	
	НовыйВидыСубконтоСчетов = Новый Соответствие();	
	ДополнитьСоответствие(НовыйВидыСубконтоСчетов, ВидыСубконтоСчетов);
	
	ИмяТаблицы = Счет.Метаданные().Имя;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СчетаВидыСубконто.Ссылка КАК Счет,
	|	СчетаВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	СчетаВидыСубконто.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ПланСчетов." + ИмяТаблицы + ".ВидыСубконто КАК СчетаВидыСубконто
	|ИТОГИ ПО
	|	Счет");
	ВыборкаСчет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСчет.Следующий() Цикл
		ВидыСубконто = Новый Массив;
	
		Выборка = ВыборкаСчет.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеВидаСубконто = Новый Структура;
			ОписаниеВидаСубконто.Вставить("Ссылка", Выборка.ВидСубконто);
			ОписаниеВидаСубконто.Вставить("НомерСтроки", Выборка.НомерСтроки);
			ВидыСубконто.Добавить(ОписаниеВидаСубконто);
		КонецЦикла;
		
		НовыйВидыСубконтоСчетов.Вставить(ВыборкаСчет.Счет, ВидыСубконто);
	КонецЦикла;
	
	ВидыСубконтоСчетов = Новый ФиксированноеСоответствие(НовыйВидыСубконтоСчетов);
	
	Возврат ВидыСубконтоСчетов[Счет];
	
КонецФункции

#КонецОбласти

#КонецОбласти